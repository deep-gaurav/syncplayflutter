schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: Subscription
}

type ChatMessage {
  player: Player!
  message: String!
}

type LobbyPlayer {
  player: Player!
  state: UserState!
  isConnected: Boolean!
}

type MutationRoot {
  createLobby(userId: String!, userName: String!): String!
  joinLobby(playerId: String!, playerName: String!, roomId: String!): String!
  disconnect(playerId: String!, roomId: String!): String!
  chat(playerId: String!, roomId: String!, message: String!): String!
}

type NotReadyData {
  empty: Int!
}

type Player {
  id: String!
  name: String!
}

type PlayerConnected {
  player: Player!
  room: Room!
}

type PlayerJoined {
  player: Player!
  room: Room!
}

type PlayerLeft {
  player: Player!
  room: Room!
}

type PlayerRemoved {
  player: Player!
  room: Room!
}

type QueryRoot {
  hello: String!
  ping: String!
  statusUpdate(
    userId: String!
    roomId: String!
    isPlaying: Boolean!
    positionSecs: Int!
  ): ReadyData!
  paused(userId: String!, roomId: String!, positionSecs: Int!): ReadyData!
  resumed(userId: String!, roomId: String!, positionSecs: Int!): ReadyData!
}

type ReadyData {
  playing: Boolean!
  positionSecs: Int!
}

type Room {
  id: String!
  users: [LobbyPlayer!]!
  players: [LobbyPlayer!]!
}

union ServerResponse =
    PlayerJoined
  | PlayerConnected
  | PlayerLeft
  | PlayerRemoved
  | ReadyData
  | ChatMessage

type Subscription {
  serverMessages(roomId: String!, playerId: String!): ServerResponse!
}

union UserState = NotReadyData | ReadyData
